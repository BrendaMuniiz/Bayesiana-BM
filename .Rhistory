tinytex::install_tinytex()
unlink('P1 Bayesiana_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages('rmarkdown')
install.packages('tinytex')
install.packages("rmarkdown")
install.packages("tinytex")
knitr::opts_chunk$set(echo = TRUE)
install.packages('firstbayes')
library(mas3321)
install.packages('mas3321')
library(mas3321)
install.packages("mas3321", repos="http://R-Forge.R-project.org")
library(mas3321)
data(cavendish)
install.packages("mas3321", repos="http://R-Forge.R-project.org")
library(mas3321)
dados -> data(cavendish)
install.packages("mas3321", repos = "http://R-Forge.R-project.org")
knitr::opts_chunk$set(echo = TRUE)
data(cavendish)
data(cavendish)
data(cavendish)
install.packages("mas3321", repos="http://R-Forge.R-project.org")
library(mas3321)
data(cavendish)
View(cavendish)
data(cavendish)
table(cavendish)
dados <- mas3321::cavendish
data(cavendish)
(n = length(cavendish))
(xbarra = mean(cavendish))
var(cavendish)
var(cavendish)/n
sigma2 = 38 # variancia conhecida
n = length(cavendish)
(xbarra = mean(cavendish))
var(cavendish)
var(cavendish)/n
sigma2 = 38 # variancia conhecida
n = length(cavendish)
xbarra = 5.48
var(cavendish)
var(cavendish)/n
sigma2 = 0.04 # variancia conhecida
n = length(cavendish)
xbarra = 5.48
var(cavendish)
var(cavendish)/n
sigma2 = 0.04 # variancia conhecida
n = 23
xbarra = 5.48
var(cavendish)
var(cavendish)/n
sigma2 = 0.04 # variancia conhecida
# funcao de verossimilhanca
f.vero = function(mu, cavendish) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,50,0.01)
vero = sapply(mu.seq,f.vero,dados = cavendish)
data(cavendish)
cav <- cavendish
View(cav)
# funcao de verossimilhanca
f.vero = function(mu, cav) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,50,0.01)
vero = sapply(mu.seq,f.vero,dados = cav)
data(cavendish)
cav <- cavendish
cav
View(cavendish)
View(cavendish)
data(cavendish)
myvector <- unlist(cavendish)
x = regmatches(myvector, regexpr("[0-9]+", myvector))
y = as.numeric(x)
sum(y)
data(cavendish)
myvector <- unlist(cavendish)
x = regmatches(myvector, regexpr("[0-9]+", myvector))
y = as.numeric(x)
data(cavendish)
myvector <- unlist(cavendish)
x = regmatches(myvector, regexpr("[0-9]+", myvector))
data(cavendish)
myvector <- unlist(cavendish)
data(cavendish)
dados <- cavendish::earth_density
data(cavendish)
dados <- cavendish::earth_density
data(cavendish)
dados <- earth_density
data(cavendish)
earth_density
data(cavendish)
cavendish(earth_density)
data(cavendish)
cavendish['earth_density']
data(cavendish)
dados<- cavendish['earth_density']
n = 23
xbarra = 5.48
var(dados)
var(dados)/n
sigma2 = 0.04 # variancia conhecida
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,50,0.01)
vero = sapply(mu.seq,f.vero,dados = dados)
View(cavendish)
data(cavendish)
dados<- as.vector(cavendish['earth_density'])
data(cavendish)
dados<- as.vector(cavendish['earth_density'])
data(cavendish)
dados<- as.vector(cavendish['earth_density'])
class(dados)
data(cavendish)
dados<- cavendish[['earth_density']]
class(dados)
data(cavendish)
dados<- cavendish[['earth_density']]
n = 23
xbarra = 5.48
var(dados)
var(dados)/n
sigma2 = 0.04 # variancia conhecida
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,50,0.01)
vero = sapply(mu.seq,f.vero,dados = dados)
# grafico da funcao de verossimilhanca
plot(mu.seq,vero*10^(27),  col = "blue", type= "l", ylim=c(0,0.3), xlab = expression(mu), ylab = "density")
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,0.0001)
vero = sapply(mu.seq,f.vero,dados = dados)
# grafico da funcao de verossimilhanca
plot(mu.seq,vero*10^(27),  col = "blue", type= "l", ylim=c(0,0.3), xlab = expression(mu), ylab = "density")
# grafico da funcao de verossimilhanca
plot(mu.seq,vero*10^(27),  col = "blue", type= "l", ylim=c(0,13), xlab = expression(mu), ylab = "density")
# grafico da funcao de verossimilhanca
plot(mu.seq,vero*10^(27),  col = "blue", type= "l", xlab = expression(mu), ylab = "density")
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,0.01)
vero = sapply(mu.seq,f.vero,dados = dados)
# grafico da funcao de verossimilhanca
plot(mu.seq,vero*10^(27),  col = "blue", type= "l", xlab = expression(mu), ylab = "density")
# grafico da funcao de verossimilhanca
plot(mu.seq,vero,  col = "blue", type= "l", xlab = expression(mu), ylab = "density")
# grafico da densidade da media dos dados
plot(mu.seq,dnorm(mean(pesos),mu.seq,sqrt(sigma2/n)), type="l",col = "green")
# grafico da densidade da media dos dados
plot(mu.seq,dnorm(mean(dados),mu.seq,sqrt(sigma2/n)), type="l",col = "green")
# informacao a priori
nu = 10
tau2 = 1
lines(density(rnorm(1000,nu,sqrt(tau2))))
# informacao a priori
nu = 10
tau2 = 1
lines(density(rnorm(1000,nu,sqrt(tau2))))
# informacao a priori
nu = 10
tau2 = 1
lines(density(rnorm(1000,nu,sqrt(tau2))))
# grafico da densidade da media dos dados
plot(mu.seq,dnorm(mean(dados),mu.seq,sqrt(sigma2/n)), type="l",col = "green")
# informacao a priori
nu = 10
tau2 = 1
lines(density(rnorm(1000,nu,sqrt(tau2))))
# informacao a posteriori
(media_posteriori = (n * xbarra * tau2 + nu * sigma2) / (n * tau2 + sigma2))
(var_posteriori = sigma2 * tau2 / (n * tau2 + sigma2))
lines(density(rnorm(1000,media_posteriori,sqrt(var_posteriori))), col = "red")
knitr::opts_chunk$set(echo = TRUE)
# informacao dos dados: dist. normal com variancia conhecida = sigma2
n = 23
xbarra = 5.48
var(dados)
var(dados)/n
sigma2 = 0.04 # variancia conhecida
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,0.01)
vero = sapply(mu.seq,f.vero,dados = dados)
# grafico da funcao de verossimilhanca
plot(mu.seq,vero,  col = "blue", type= "l", xlab = expression(mu), ylab = "density")
# grafico da densidade da media dos dados
plot(mu.seq,dnorm(mean(dados),mu.seq,sqrt(sigma2/n)), type="l",col = "green")
# informacao a priori
nu = 10
tau2 = 1
lines(density(rnorm(1000,nu,sqrt(tau2))))
# informacao a posteriori
(media_posteriori = (n * xbarra * tau2 + nu * sigma2) / (n * tau2 + sigma2))
(var_posteriori = sigma2 * tau2 / (n * tau2 + sigma2))
lines(density(rnorm(1000,media_posteriori,sqrt(var_posteriori))), col = "red")
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,0.01)
vero = sapply(mu.seq,f.vero,dados = dados)
mu.0 <- 5.4
dp.0 <- 0.1
mu <- seq(4,7,0.01)
plot(mu,dnorm(mu,mu.0,dp.0),type="l",
col="#FF0080",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu)))
legend(4, 3.7,
legend=c("Priori informativa"),
col=c("#FF0080"),
lty=1:2,pch=c(7,6),cex=0.6)
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,0.1)
vero = sapply(mu.seq,f.vero,dados = dados)
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,1)
vero = sapply(mu.seq,f.vero,dados = dados)
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,1)
vero = sapply(mu.seq,f.vero,dados = dados)
# grafico da funcao de verossimilhanca
plot(mu.seq,vero,  col = "blue", type= "l", xlab = expression(mu), ylab = "density")
# grafico da funcao de verossimilhanca
plot(mu.seq,vero,  col = "blue", type= "l", xlab = expression(mu), ylab = "density")
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,0.1)
vero = sapply(mu.seq,f.vero,dados = dados)
# grafico da funcao de verossimilhanca
plot(mu.seq,vero,  col = "blue", type= "l", xlab = expression(mu), ylab = "density")
# grafico da densidade da media dos dados
plot(mu.seq,dnorm(mean(dados),mu.seq,sqrt(sigma2/n)), type="l",col = "green")
# informacao a priori
nu = 10
tau2 = 1
lines(density(rnorm(1000,nu,sqrt(tau2))))
# informacao a posteriori
(media_posteriori = (n * xbarra * tau2 + nu * sigma2) / (n * tau2 + sigma2))
(var_posteriori = sigma2 * tau2 / (n * tau2 + sigma2))
lines(density(rnorm(1000,media_posteriori,sqrt(var_posteriori))), col = "red")
tibble(      Priori = c("Priori"),
Media.pri = c(5.4),
Media.pos = c(5.48),
SD.pri = c(0.1),
SD.pos = c(0.2),
IC.025 = c(qnorm(0.025, mean = 5.48 , sd = 0.2)),
IC.975 = c(qnorm(0.975, mean = 5.48 , sd = 0.2)))%>%
knitr::kable(digits = 2, caption = "Resumo aposteriori (n=23)")
tibble(      Priori = c("Priori"),
Media.pri = c(5.4),
Media.pos = c(5.48),
SD.pri = c(0.1),
SD.pos = c(0.2),
IC.025 = c(qnorm(0.025, mean = 5.48 , sd = 0.2)),
IC.975 = c(qnorm(0.975, mean = 5.48 , sd = 0.2)))%>%
knitr::kable(digits = 2, caption = "Resumo aposteriori (n=23)")
mu.0 <- 5.4
dp.0 <- 0.1
mu <- seq(4,7,0.01)
plot(mu,dnorm(mu,mu.0,dp.0),type="l",
col="#FF0080",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu)))
legend(4, 3.7,
legend=c("Priori informativa"),
col=c("#FF0080"),
lty=1:2,pch=c(7,6),cex=0.6)
mu.post <- 5.46
dp.post <- 0.00303
plot(mu,dnorm(mu,mu.post,dp.post),type="l",
col="#00FFFF",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu/y)))
# grafico da densidade da media dos dados
plot(mu.seq,dnorm(mean(dados),mu.seq,sqrt(sigma2/n)), type="l",col = "green")
# informacao a priori
nu = 10
tau2 = 1
lines(density(rnorm(1000,nu,sqrt(tau2))))
# informacao a posteriori
(media_posteriori = (n * xbarra * tau2 + nu * sigma2) / (n * tau2 + sigma2))
(var_posteriori = sigma2 * tau2 / (n * tau2 + sigma2))
lines(density(rnorm(1000,media_posteriori,sqrt(var_posteriori))), col = "red")
data(cavendish)
dados<- cavendish[['earth_density']]
# install.packages("mas3321", repos="http://R-Forge.R-project.org")
library(mas3321)
install.packages('revdbayes')
data(cavendish)
dados<- cavendish[['earth_density']]
# install.packages("mas3321", repos="http://R-Forge.R-project.org")
library(mas3321)
install.packages('revdbayes')
library('revdbayes')
data(cavendish)
dados<- cavendish[['earth_density']]
# install.packages("mas3321", repos="http://R-Forge.R-project.org")
library(mas3321)
# install.packages('revdbayes')
library('revdbayes')
data(cavendish)
dados<- cavendish[['earth_density']]
# funcao de verossimilhanca
f.vero = function(mu, dados) prod(dnorm(dados,mu,sqrt(sigma2)))
mu.seq = seq(0,10,0.01)
vero = sapply(mu.seq,f.vero,dados = dados)
mu.J0 <- 5.48
dp.J0 <- Inf
mu <- seq(4,7,0.01)
plot(mu,dnorm(mu,mu.J0,dp.J0),type="l",
col="#FF0080",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu)))
legend(4, 3.7,
legend=c("Priori não informativa"),
col=c("#FF0080"),
lty=1:2,pch=c(7,6),cex=0.6)
mu.J0 <- xbarra
dp.J0 <- n/(sigma2^2)
mu <- seq(4,7,0.01)
plot(mu,dnorm(mu,mu.J0,dp.J0),type="l",
col="#FF0080",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu)))
legend(4, 3.7,
legend=c("Priori não informativa"),
col=c("#FF0080"),
lty=1:2,pch=c(7,6),cex=0.6)
mu.J0 <- xbarra
dp.J0 <- n/(sigma2)
mu <- seq(4,7,0.01)
plot(mu,dnorm(mu,mu.J0,dp.J0),type="l",
col="#FF0080",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu)))
legend(4, 3.7,
legend=c("Priori não informativa"),
col=c("#FF0080"),
lty=1:2,pch=c(7,6),cex=0.6)
mu.J0 <- n/(sigma2)
dp.J0 <- xbarra
mu <- seq(4,7,0.01)
plot(mu,dnorm(mu,mu.J0,dp.J0),type="l",
col="#FF0080",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu)))
legend(4, 3.7,
legend=c("Priori não informativa"),
col=c("#FF0080"),
lty=1:2,pch=c(7,6),cex=0.6)
muJ.post <- xbarra
dpJ.post <- n/sigma2
plot(mu,dnorm(mu,muJ.post,dpJ.post),type="l",
col="#00FFFF",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu/y)))
muJ.post <- xbarra
dpJ.post <- n/sigma2^2
plot(mu,dnorm(mu,muJ.post,dpJ.post),type="l",
col="#00FFFF",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu/y)))
muJ.post <- xbarra
dpJ.post <- n*sigma2^2
plot(mu,dnorm(mu,muJ.post,dpJ.post),type="l",
col="#00FFFF",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu/y)))
muJ.post <- xbarra
dpJ.post <- n*sigma2
plot(mu,dnorm(mu,muJ.post,dpJ.post),type="l",
col="#00FFFF",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu/y)))
muJ.post <- xbarra
dpJ.post <- n*sigma2^2
plot(mu,dnorm(mu,muJ.post,dpJ.post),type="l",
col="#00FFFF",lty=1,pch=18,
xlab=expression(mu),
ylab=expression(pi(mu/y)))
tibble(      Priori = c("Priori"),
Media.pri = c(5.4),
Media.pos = c(5.48),
SD.pri = c(0.1),
SD.pos = c(0.2),
IC.025 = c(qnorm(0.025, mean = 5.48 , sd = 0.2)),
IC.975 = c(qnorm(0.975, mean = 5.48 , sd = 0.2)))%>%
knitr::kable(digits = 2, caption = "Resumo aposteriori (n=23)")
