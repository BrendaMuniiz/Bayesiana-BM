par(new=T)
plot(theta,ver.bin(12),
type = "l", axes = F,
frame = T, ann = F, col = 2)
axis(4, col.axis = 2, col = 2)
mtext(expression(L(theta)), side = 4, line = 3,
col = 2)
par(new=T)
plot(theta, ver.bin(21),type = "l", axes = F,
frame = T, ann = F, col = 3)
axis(3, col.axis = 3, col = 3)
mtext(expression(L(theta)), side = 3, line = 3,col = 3)
par(mar = c(4, 4, 4, 4))
plot(theta,ver.bin.theta(3),
ylab=expression(L(theta)),
xlab=expression(theta),type= "l")
ver.bin <- function(y) choose(24,y)*theta^y*(1-theta)^(n-y)
n <- 24
theta <- seq(0,1,0.001)
par(mar = c(4, 4, 4, 4))
plot(theta,ver.bin.theta(3),
ylab=expression(L(theta)),
xlab=expression(theta),type= "l")
ver.bin.theta <- function(y) choose(24,y)*theta^y*(1-theta)^(n-y)
n <- 24
theta <- seq(0,1,0.001)
par(mar = c(4, 4, 4, 4))
plot(theta,ver.bin.theta(3),
ylab=expression(L(theta)),
xlab=expression(theta),type= "l")
par(new=T)
plot(theta,ver.bin.theta(12),
type = "l", axes = F,
frame = T, ann = F, col = 2)
axis(4, col.axis = 2, col = 2)
mtext(expression(L(theta)), side = 4, line = 3,
col = 2)
par(new=T)
plot(theta, ver.bin.theta(21),type = "l", axes = F,
frame = T, ann = F, col = 3)
axis(3, col.axis = 3, col = 3)
mtext(expression(L(theta)), side = 3, line = 3,col = 3)
ver.bin.phi <- function(y) choose(24,y)*sin(phi)^(2*y)*(1-sin(phi)^2)^(n-y)
n <- 24
theta <- seq(0,1,0.01)
phi <- seq(0,pi/2,0.01)
par(mar = c(4, 4, 4, 4))
plot(phi,ver.bin.phi(3),
ylab=expression(L(phi)),
xlab=expression(phi),type= "l")
par(new=T)
plot(phi,ver.bin.phi(12),
type = "l", axes = F,
frame = T, ann = F, col = 2)
axis(4, col.axis = 2, col = 2)
mtext(expression(L(phi)), side = 4, line = 3,
col = 2)
par(new=T)
plot(phi, ver.bin.phi(21),type = "l", axes = F,
frame = T, ann = F, col = 3)
axis(3, col.axis = 3, col = 3)
mtext(expression(L(phi)), side = 3, line = 3,col = 3)
par(mfrow=c(1,2))
par(mar = c(4, 4, 4, 4))
plot(theta,ver.bin.theta(3), ylab=expression(L(theta)), xlab=expression(theta),type= "l")
par(new=T)
plot(theta,ver.bin.theta(12), type = "l", axes = F,
frame = T, ann = F, col = 2)
axis(4, col.axis = 2, col = 2)
mtext(expression(L(theta)), side = 4, line = 3, col = 2)
par(new=T)
plot(theta, ver.bin.theta(21),type = "l", axes = F,
frame = T, ann = F, col = 3)
axis(3, col.axis = 3, col = 3)
mtext(expression(L(theta)), side = 3, line = 3,col = 3)
par(new=T)
plot(theta,dbeta(theta,1/2,1/2),col="hotpink",lwd=2,lty=2,
type = "l", axes = F,
frame = T, ann = F)
par(mar = c(4, 4, 4, 4))
plot(phi,ver.bin.phi(3), ylab=expression(L(phi)),
xlab=expression(phi),type= "l")
par(new=T)
plot(phi,ver.bin.phi(12), type = "l", axes = F,
frame = T, ann = F, col = 2)
axis(4, col.axis = 2, col = 2)
mtext(expression(L(phi)), side = 4, line = 3,col = 2)
par(new=T)
plot(phi, ver.bin.phi(21),type = "l", axes = F,
frame = T, ann = F, col = 3)
axis(3, col.axis = 3, col = 3)
mtext(expression(L(phi)), side = 3, line = 3,col = 3)
abline(h=0.10,col="hotpink",lwd=2,lty=2)
install.packages("R2OpenBUGS")
# Limpando o ambiente
rm(list=ls(all=TRUE))
# Carregando as bibliotecas
library(tidyverse)
library(cowplot)
knitr::opts_chunk$set(echo = TRUE)
ggpairs(dataexone)
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
# knitr::include_graphics("img/uniedlogo.png")
R.version
# Limpando o ambiente
rm(list=ls(all=TRUE))
# Carregando as bibliotecas
library(tidyverse)
library(GGally)
library(ggcorrplot)
install.packages("ggcorrplot")
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
# knitr::include_graphics("img/uniedlogo.png")
R.version
# Limpando o ambiente
rm(list=ls(all=TRUE))
# Carregando as bibliotecas
library(tidyverse)
library(GGally)
library(ggcorrplot)
# Leitura do dataset
dataexone <- read.csv2("data-table-B2.csv", header = TRUE,
sep = ",", encoding='UTF-8')
head(dataexone)
knitr::opts_chunk$set(echo = TRUE)
glimpse(dataexone)
summary(dataexone)
y <- dataexone$y
x1 <- dataexone$x1
x2 <- dataexone$x2
x3 <- dataexone$x3
x4 <- dataexone$x4
x5 <- dataexone$x5
dadosexemone <- data.frame(cbind(x1, x2, x3, x4, x5, y))
n <- length(dataexone$y)
boxplot(y, main = "Boxplot do fluxo total de calor",
col = "tomato", horizontal = TRUE,
xlab = "(Kilowatts)")
hist(y, main = "Histograma do fluxo total de calor",
col = "tomato",
ylab = "Frequência", xlab = "(Kilowatts)")
boxplot(x1, main = "Boxplot da insolação",
col = "lightblue", horizontal = TRUE,
xlab = "(watts/m^2)")
hist(x1, main = "Boxplot da insolação",
col = "lightblue",
ylab = "Frequência", xlab = "(watts/m^2)")
boxplot(x2, main = "Boxplot da posição do foco (Leste)",
col = "orange", horizontal = TRUE,
xlab = "(polegadas)")
hist(x2, main = "Histograma da posição do foco (Leste)",
col = "orange",
ylab = "Frequência", xlab = "(polegadas)")
boxplot(x3, main = "Boxplot da posição do foco (Sul)",
col = "lightgreen", horizontal = TRUE,
xlab = "(polegadas)")
hist(x3, main = "Histograma da posição do foco (Sul)",
col = "lightgreen",
ylab = "Frequência", xlab = "(polegadas)")
boxplot(x4, main = "Boxplot da posição do foco (Norte)",
col = "yellow", horizontal = TRUE,
xlab = "(polegadas)")
hist(x4, main = "Histograma da posição do foco (Norte)",
col = "yellow",
ylab = "Frequência", xlab = "(polegadas)")
boxplot(x5, main = "Boxplot da hora do dia",
col = "steelblue", horizontal = TRUE,
xlab = "Hora do dia")
hist(x5, main = "Histograma da hora do dia",
col = "steelblue",
ylab = "Frequência", xlab = "Hora do dia")
ggpairs(dataexone)
X <- matrix(c(rep(1,n), dataexone$x1, dataexone$x2, dataexone$x3, dataexone$x4, dataexone$x5), ncol = 6, nrow = n, byrow = FALSE)
Y <- matrix(dataexone$y, ncol = 1, nrow = length(dataexone$y))
t(X)%*%X
t(X)%*%Y
betas <- solve(t(X)%*%X)%*%t(X)%*%Y
betas
SQres <-  (t(Y)%*%Y)-(t(betas)%*%t(X)%*%Y)
SQres
# p = número de covariâveis + 1 (beta0)
p=ncol(X)
sigma2 <- (SQres)/(n-p)
sigma2
Y_est <- X%*%betas
Y_est
res <- Y - Y_est
res
# Soma dos quadrados dos resíduos
SQRes <- t(Y-Y_est)%*%(Y-Y_est)
SQRes
# Soma dos quadrados totais
# vetor unitario para facilitar as contas
u <- c(rep(1,n))
SQTotal <- t(Y)%*%Y - ((t(u)%*%Y)^2)/n
SQTotal
# Soma dos quadrados da regressao
SQReg <- SQTotal - SQRes
SQReg
#Calculando a anova
k <- 5 # covariaveis utilizadas
SQReg <- t(betas)%*%t(X)%*%Y-((t(u)%*%Y)^2)/n
gl_sqreg <- k
QMReg <- SQReg/gl_sqreg
SQRes <- t(Y-Y_est)%*%(Y-Y_est)
gl_sqres <- n-p
QMRes <- SQRes/gl_sqres
SQTotal <- t(Y)%*%Y - ((t(u)%*%Y)^2)/n
gl_sqtotal <- n-1
#calculando a estatistica F
F_0 <- QMReg/QMRes
F_0
alpha <- 0.02
RR <- qf(alpha, df1 = k, df2 = n - k - 1, lower.tail = F)
RR
if(RR < F_0){
cat("Rejeita-se H0")
}
QMReg <- SQReg/k
QMReg
QMRes <- SQRes/(n-p)
QMRes
fv <- c("Regressão", "Resíduo", "Total")
gl <- c(k, n-p, n-1)
sq <- c(SQReg, SQRes, SQTotal)
qm <- c(QMReg, QMRes, NA)
f <- c(F_0, NA, NA)
df <- data.frame("Fonte_Variação" = fv, "G.L." = gl, "SQ" = sq, "QM" = qm, "F" = f)
df
R2 <-  SQReg/SQTotal
R2
QMTotal <- SQTotal/(n-1)
R2_ajust <- 1 - (QMRes / QMTotal)
R2_ajust
reg_x1x2 <- lm(y~x1+x2)
summary(reg_x1x2)
reg_x1x2x3 <- lm(y~x1+x2+x3)
summary(reg_x1x2x3)
reg_x1x2x3x4 <- lm(y~x1+x2+x3+x4)
summary(reg_x1x2x3x4)
cenario <- c("R2","R2_ajustado")
reg_valor_x1x2 <- c(0.4492, 0.4069)
reg_valor_x1x2x3 <- c(0.5297, 0.4733)
reg_valor_x1x2x3x4 <- c(0.8909,	0.8727)
df_comparativo <- data.frame("Cenário" = cenario, "y_com_x1_e_x2" = reg_valor_x1x2,
"y_com_x1_x2_e_x3" = reg_valor_x1x2x3, "y_com_x1_x2_x3_e_x4" = reg_valor_x1x2x3x4)
df_comparativo
alpha <- 0.02
beta0_est <- betas[1,1]
beta1_est <- betas[2,1]
beta2_est <- betas[3,1]
beta3_est <- betas[4,1]
beta4_est <- betas[5,1]
beta5_est <- betas[6,1]
t1 <- qt(alpha/2, n-p)
t2 <- qt(1-alpha/2, n-p)
cbind(t1,t2)
# testando para beta1
t_b1 <- beta1_est / (sqrt( QMRes* solve(t(X)%*%X)[2,2]))
t_b1
if(t_b1 < t1 || t_b1>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
# testando para beta2
t_b2 <- beta2_est / (sqrt( QMRes* solve(t(X)%*%X)[3,3]))
t_b2
if(t_b2 < t1 || t_b2>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
# testando para beta3
t_b3 <- beta3_est / (sqrt( QMRes* solve(t(X)%*%X)[4,4]))
t_b3
if(t_b3 < t1 || t_b3>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
# testando para beta4
t_b4 <- beta4_est / (sqrt( QMRes* solve(t(X)%*%X)[5,5]))
t_b4
if(t_b4 < t1 || t_b4>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
# testando para beta5
t_b5 <- beta5_est / (sqrt( QMRes* solve(t(X)%*%X)[6,6]))
t_b5
if(t_b5 < t1 || t_b5>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
correlacao <- cor(dataexone)[1,]
correlacao
SQReg
Sxx <- sum(x1^2) - n*(mean(x1))^2
Sxy <- sum(x1*y) - n*(mean(x1)*mean(y))
beta_est_modredu <- Sxy/Sxx
beta_est_modredu
SQReg_modredu <- beta_est_modredu*Sxy
SQReg_modredu # 1 G.L.
gl_modredu <- 1
SQReg_teste <- SQReg-SQReg_modredu #SQReg(\beta_2|\beta_0,\beta_1)
SQReg_teste
QMReg_modredus <- (SQReg_teste/gl_modredu)
F_testeparcial <- (QMReg_modredus/QMRes)
F_testeparcial
alpha <- 0.05
RR <- qf(alpha, df1 = gl_modredu, df2 = n - gl_modredu -1, lower.tail = F)
RR
if(RR < F_testeparcial){
cat("Rejeita-se H0")
}
#Lembre-se que:
#Inversa de X^{T}X = solve(t(X)%*%X)
#alpha <- 0.05
#beta1_est = betas[2,1]
#t1 <- qt(alpha/2, n-p)
#t2 <- qt(1-alpha/2, n-p)
#Calculado no primeiro teste parcial onde foi utilizada a estatística t.
dp_b1 <- sqrt( QMRes* solve(t(X)%*%X)[2,2] )
b1_lim_inf <- beta1_est - t2*dp_b1
b1_lim_sup <- beta1_est - t1*dp_b1
cbind(b1_lim_inf, b1_lim_sup)
# Intervalo de Confianca para a esperanca de Y
###########
## LEMBRETE
# Y0_estimado ~ N(X0*betas, sigma^2*X0*(X^T*X)^(-1)*X0^T)
# (Y0_est  - X*betas) / sqrt (sigma^2*X0*(X^T*X)^(-1)*X0^T) tem distribuicao N(0,1)
# como nos nao sabemos o valor de sigma^2 vamos estima-lo assim a estatistica de teste fica
# t = (Y0_est  - X*betas) / sqrt (QMRes* X0*(X^T*X)^(-1)*X0^T) que sob H0 tem
#distribuicao t(n-p)
#
# QMRes = SQRes / (n-p)
##########
knitr::opts_chunk$set(echo = TRUE)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
require(ggplot2)
library(ggplot2)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
library(ggplot2)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
library(ggplot2)
library(ggplot2)
library(ggplot2)
# Limpando o ambiente
rm(list=ls(all=TRUE))
# Carregando as bibliotecas
library(tidyverse)
library(GGally)
library(ggcorrplot)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
z <- c(rep(0,5))
x <- c(seq(2,10,2))
y <- c(25,29,45,53,73)
agricola <- data.frame(z=z,x=x,y=y)
z <- c(rep(1,5))
x <- c(seq(4,12,2))
y <- c(47,73,87,109,119)
urbano <- data.frame(z=z,x=x,y=y)
z <- c(rep(0,5))
x <- c(seq(2,10,2))
y <- c(25,29,45,53,73)
agricola <- data.frame(z=z,x=x,y=y)
summary(agricola)
z <- c(rep(1,5))
x <- c(seq(4,12,2))
y <- c(47,73,87,109,119)
urbano <- data.frame(z=z,x=x,y=y)
summary(urbano)
# Limpando o ambiente
rm(list=ls(all=TRUE))
# Carregando as bibliotecas
library(tidyverse)
library(R2OpenBUGS)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
z <- c(rep(0,5))
x <- c(seq(2,10,2))
y <- c(25,29,45,53,73)
agricola <- data.frame(z=z,x=x,y=y)
summary(agricola)
modelo <- function(){
# Definindo a distribuição dos dados
for(i in 1:N){
y[i] ~ dnorm(mu[i],tau)
mu[i] <- beta0 + beta1*x[i]
}
# Modelagem da incerteza a priori utilizando uma priori vaga
beta0 ~ dnorm(0.0,1.0E-6)
beta1 ~ dnorm(0.0,1.0E-6)
tau ~ dgamma(0.001,0.001)
sigma2 <- 1 / tau
}
z <- c(rep(0,5))
x <- c(seq(2,10,2))
y <- c(25,29,45,53,73)
agricola <- data.frame(z=z,x=x,y=y)
summary(agricola)
modelo(agricola)
ggplot(data = dad, aes(x, y))+
geom_point(col= z+1)
ggplot(data = dad, aes(x= x, y= y))+
geom_point()
ggplot(data = dad, aes(x= x, y= y))+
geom_point()+
facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point()
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(col= z+1)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(col= z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(col= 'red')
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y, col= z))+
geom_point()
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y, fill= z))+
geom_point()
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y, col= z+1))+
geom_point()
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y, col= z+1))+
geom_point(col= z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(col= z))
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(fill= z))
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(col= z+1))
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))
# facet_wrap(~z)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
sample(dad)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
glimpse(dad)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))
# facet_wrap(~z)
z <- as.integer(c(rep(0,5),rep(1,5)))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
glimpse(dad)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))
# facet_wrap(~z)
z <- as.integer(c(rep(0,5),rep(1,5)))
x <- as.integer(c(seq(2,10,2),seq(4,12,2)))
y <- as.integer(c(25,29,45,53,73,47,73,87,109,119))
dad <- data.frame(z=z,x=x,y=y)
glimpse(dad)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))+
facet_wrap(~z)+
geom_smooth(method = "lm", se=F)
x0 <- c(seq(2,10,2))
y0 <- c(25,29,45,53,73)
x0 <- seq(1, 5)
y0 <- seq(1,5)
x1 <- seq(6,10)
y1 <- seq(6,10)
setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
list.files()
setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
list.files()
dados = read.csv("dados_restaurantes (1).csv", sep = ",", header = T)
dados
setwd("~/GitHub/Bayesiana-BM")
# setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
setwd("~/GitHub/Bayesiana-BM")
list.files()
setwd("~/GitHub/Bayesiana-BM")
# list.files()
