beta3_est <- betas[4,1]
beta4_est <- betas[5,1]
beta5_est <- betas[6,1]
t1 <- qt(alpha/2, n-p)
t2 <- qt(1-alpha/2, n-p)
cbind(t1,t2)
# testando para beta1
t_b1 <- beta1_est / (sqrt( QMRes* solve(t(X)%*%X)[2,2]))
t_b1
if(t_b1 < t1 || t_b1>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
# testando para beta2
t_b2 <- beta2_est / (sqrt( QMRes* solve(t(X)%*%X)[3,3]))
t_b2
if(t_b2 < t1 || t_b2>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
# testando para beta3
t_b3 <- beta3_est / (sqrt( QMRes* solve(t(X)%*%X)[4,4]))
t_b3
if(t_b3 < t1 || t_b3>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
# testando para beta4
t_b4 <- beta4_est / (sqrt( QMRes* solve(t(X)%*%X)[5,5]))
t_b4
if(t_b4 < t1 || t_b4>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
# testando para beta5
t_b5 <- beta5_est / (sqrt( QMRes* solve(t(X)%*%X)[6,6]))
t_b5
if(t_b5 < t1 || t_b5>t2){
cat("Rejeita-se H0")
} else{cat("Aceita-se H0")}
correlacao <- cor(dataexone)[1,]
correlacao
SQReg
Sxx <- sum(x1^2) - n*(mean(x1))^2
Sxy <- sum(x1*y) - n*(mean(x1)*mean(y))
beta_est_modredu <- Sxy/Sxx
beta_est_modredu
SQReg_modredu <- beta_est_modredu*Sxy
SQReg_modredu # 1 G.L.
gl_modredu <- 1
SQReg_teste <- SQReg-SQReg_modredu #SQReg(\beta_2|\beta_0,\beta_1)
SQReg_teste
QMReg_modredus <- (SQReg_teste/gl_modredu)
F_testeparcial <- (QMReg_modredus/QMRes)
F_testeparcial
alpha <- 0.05
RR <- qf(alpha, df1 = gl_modredu, df2 = n - gl_modredu -1, lower.tail = F)
RR
if(RR < F_testeparcial){
cat("Rejeita-se H0")
}
#Lembre-se que:
#Inversa de X^{T}X = solve(t(X)%*%X)
#alpha <- 0.05
#beta1_est = betas[2,1]
#t1 <- qt(alpha/2, n-p)
#t2 <- qt(1-alpha/2, n-p)
#Calculado no primeiro teste parcial onde foi utilizada a estatística t.
dp_b1 <- sqrt( QMRes* solve(t(X)%*%X)[2,2] )
b1_lim_inf <- beta1_est - t2*dp_b1
b1_lim_sup <- beta1_est - t1*dp_b1
cbind(b1_lim_inf, b1_lim_sup)
# Intervalo de Confianca para a esperanca de Y
###########
## LEMBRETE
# Y0_estimado ~ N(X0*betas, sigma^2*X0*(X^T*X)^(-1)*X0^T)
# (Y0_est  - X*betas) / sqrt (sigma^2*X0*(X^T*X)^(-1)*X0^T) tem distribuicao N(0,1)
# como nos nao sabemos o valor de sigma^2 vamos estima-lo assim a estatistica de teste fica
# t = (Y0_est  - X*betas) / sqrt (QMRes* X0*(X^T*X)^(-1)*X0^T) que sob H0 tem
#distribuicao t(n-p)
#
# QMRes = SQRes / (n-p)
##########
knitr::opts_chunk$set(echo = TRUE)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
require(ggplot2)
library(ggplot2)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
library(ggplot2)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
library(ggplot2)
library(ggplot2)
library(ggplot2)
# Limpando o ambiente
rm(list=ls(all=TRUE))
# Carregando as bibliotecas
library(tidyverse)
library(GGally)
library(ggcorrplot)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
z <- c(rep(0,5))
x <- c(seq(2,10,2))
y <- c(25,29,45,53,73)
agricola <- data.frame(z=z,x=x,y=y)
z <- c(rep(1,5))
x <- c(seq(4,12,2))
y <- c(47,73,87,109,119)
urbano <- data.frame(z=z,x=x,y=y)
z <- c(rep(0,5))
x <- c(seq(2,10,2))
y <- c(25,29,45,53,73)
agricola <- data.frame(z=z,x=x,y=y)
summary(agricola)
z <- c(rep(1,5))
x <- c(seq(4,12,2))
y <- c(47,73,87,109,119)
urbano <- data.frame(z=z,x=x,y=y)
summary(urbano)
# Limpando o ambiente
rm(list=ls(all=TRUE))
# Carregando as bibliotecas
library(tidyverse)
library(R2OpenBUGS)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
dad
z <- c(rep(0,5))
x <- c(seq(2,10,2))
y <- c(25,29,45,53,73)
agricola <- data.frame(z=z,x=x,y=y)
summary(agricola)
modelo <- function(){
# Definindo a distribuição dos dados
for(i in 1:N){
y[i] ~ dnorm(mu[i],tau)
mu[i] <- beta0 + beta1*x[i]
}
# Modelagem da incerteza a priori utilizando uma priori vaga
beta0 ~ dnorm(0.0,1.0E-6)
beta1 ~ dnorm(0.0,1.0E-6)
tau ~ dgamma(0.001,0.001)
sigma2 <- 1 / tau
}
z <- c(rep(0,5))
x <- c(seq(2,10,2))
y <- c(25,29,45,53,73)
agricola <- data.frame(z=z,x=x,y=y)
summary(agricola)
modelo(agricola)
ggplot(data = dad, aes(x, y))+
geom_point(col= z+1)
ggplot(data = dad, aes(x= x, y= y))+
geom_point()
ggplot(data = dad, aes(x= x, y= y))+
geom_point()+
facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point()
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(col= z+1)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(col= z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(col= 'red')
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y, col= z))+
geom_point()
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y, fill= z))+
geom_point()
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y, col= z+1))+
geom_point()
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y, col= z+1))+
geom_point(col= z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(col= z))
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(fill= z))
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(col= z+1))
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))
# facet_wrap(~z)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
sample(dad)
z <- c(rep(0,5),rep(1,5))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
glimpse(dad)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))
# facet_wrap(~z)
z <- as.integer(c(rep(0,5),rep(1,5)))
x <- c(seq(2,10,2),seq(4,12,2))
y <- c(25,29,45,53,73,47,73,87,109,119)
dad <- data.frame(z=z,x=x,y=y)
glimpse(dad)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))
# facet_wrap(~z)
z <- as.integer(c(rep(0,5),rep(1,5)))
x <- as.integer(c(seq(2,10,2),seq(4,12,2)))
y <- as.integer(c(25,29,45,53,73,47,73,87,109,119))
dad <- data.frame(z=z,x=x,y=y)
glimpse(dad)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))
# facet_wrap(~z)
ggplot(data = dad, aes(x= x, y= y))+
geom_point(aes(colour= z))+
facet_wrap(~z)+
geom_smooth(method = "lm", se=F)
x0 <- c(seq(2,10,2))
y0 <- c(25,29,45,53,73)
x0 <- seq(1, 5)
y0 <- seq(1,5)
x1 <- seq(6,10)
y1 <- seq(6,10)
setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
list.files()
setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
list.files()
dados = read.csv("dados_restaurantes (1).csv", sep = ",", header = T)
dados
setwd("~/GitHub/Bayesiana-BM")
# setwd("C:/Users/adria/OneDrive/Área de Trabalho/USP/4º Semestre/SME0824 - Gestão da Qualidade/Questionários")
setwd("~/GitHub/Bayesiana-BM")
list.files()
setwd("~/GitHub/Bayesiana-BM")
# list.files()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)    # ggplot, dplyr, %>%, and friends
library(gapminder)    # Country-year panel data from the Gapminder Project
library(brms)         # Bayesian modeling through Stan
library(tidybayes)    # Manipulate Stan objects in a tidy way
library(broom)        # Convert model objects to data frames
library(broom.mixed)  # Convert brms model objects to data frames
library(emmeans)      # Calculate marginal effects in even fancier ways
library(ggh4x)        # For nested facets in ggplot
library(ggrepel)      # For nice non-overlapping labels in ggplot
library(ggdist)       # For distribution-related ggplot geoms
library(scales)       # For formatting numbers with comma(), dollar(), etc.
library(patchwork)    # For combining plots
library(ggokabeito)   # Colorblind-friendly color palette
# Make all the random draws reproducible
set.seed(1234)
# Bayes stuff
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan. You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
options(mc.cores = 4,  # Use 4 cores
brms.backend = "cmdstanr")
bayes_seed <- 1234
# Custom ggplot theme to make pretty plots
# Get Barlow Semi Condensed at https://fonts.google.com/specimen/Barlow+Semi+Condensed
theme_clean <- function() {
theme_minimal(base_family = "Barlow Semi Condensed") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
strip.text = element_text(face = "bold", size = rel(0.8), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold"))
}
# Make labels use Barlow by default
update_geom_defaults("label_repel",
list(family = "Barlow Semi Condensed",
fontface = "bold"))
update_geom_defaults("label",
list(family = "Barlow Semi Condensed",
fontface = "bold"))
# The ggh4x paackage includes a `facet_nested()` function for nesting facets
# (like countries in continents). Throughout this post, I want the
# continent-level facets to use bolder text and a lighter gray strip. I don't
# want to keep repeating all these settings, though, so I create a list of the
# settings here with `strip_nested()` and feed it to `facet_nested_wrap()` later
nested_settings <- strip_nested(
text_x = list(element_text(family = "Barlow Semi Condensed Black",
face = "plain"), NULL),
background_x = list(element_rect(fill = "grey92"), NULL),
by_layer_x = TRUE)
library(tidyverse)    # ggplot, dplyr, %>%, and friends
library(gapminder)    # Country-year panel data from the Gapminder Project
library(brms)         # Bayesian modeling through Stan
library(tidybayes)    # Manipulate Stan objects in a tidy way
library(broom)        # Convert model objects to data frames
library(broom.mixed)  # Convert brms model objects to data frames
library(emmeans)      # Calculate marginal effects in even fancier ways
library(ggh4x)        # For nested facets in ggplot
library(ggrepel)      # For nice non-overlapping labels in ggplot
library(ggdist)       # For distribution-related ggplot geoms
library(scales)       # For formatting numbers with comma(), dollar(), etc.
library(patchwork)    # For combining plots
library(ggokabeito)   # Colorblind-friendly color palette
# Make all the random draws reproducible
set.seed(1234)
# Bayes stuff
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan. You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
options(mc.cores = 4,  # Use 4 cores
brms.backend = "cmdstanr")
bayes_seed <- 1234
# Custom ggplot theme to make pretty plots
# Get Barlow Semi Condensed at https://fonts.google.com/specimen/Barlow+Semi+Condensed
theme_clean <- function() {
theme_minimal(base_family = "Barlow Semi Condensed") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
strip.text = element_text(face = "bold", size = rel(0.8), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold"))
}
# Make labels use Barlow by default
update_geom_defaults("label_repel",
list(family = "Barlow Semi Condensed",
fontface = "bold"))
update_geom_defaults("label",
list(family = "Barlow Semi Condensed",
fontface = "bold"))
# The ggh4x paackage includes a `facet_nested()` function for nesting facets
# (like countries in continents). Throughout this post, I want the
# continent-level facets to use bolder text and a lighter gray strip. I don't
# want to keep repeating all these settings, though, so I create a list of the
# settings here with `strip_nested()` and feed it to `facet_nested_wrap()` later
nested_settings <- strip_nested(
text_x = list(element_text(family = "Barlow Semi Condensed Black",
face = "plain"), NULL),
background_x = list(element_rect(fill = "grey92"), NULL),
by_layer_x = TRUE)
library(tidyverse)    # ggplot, dplyr, %>%, and friends
library(gapminder)    # Country-year panel data from the Gapminder Project
library(brms)         # Bayesian modeling through Stan
library(tidybayes)    # Manipulate Stan objects in a tidy way
library(broom)        # Convert model objects to data frames
library(broom.mixed)  # Convert brms model objects to data frames
library(emmeans)      # Calculate marginal effects in even fancier ways
library(ggh4x)        # For nested facets in ggplot
library(ggrepel)      # For nice non-overlapping labels in ggplot
library(ggdist)       # For distribution-related ggplot geoms
library(scales)       # For formatting numbers with comma(), dollar(), etc.
library(patchwork)    # For combining plots
library(ggokabeito)   # Colorblind-friendly color palette
# Make all the random draws reproducible
set.seed(1234)
# Bayes stuff
# Use the cmdstanr backend for Stan because it's faster and more modern than
# the default rstan. You need to install the cmdstanr package first
# (https://mc-stan.org/cmdstanr/) and then run cmdstanr::install_cmdstan() to
# install cmdstan on your computer.
options(mc.cores = 4,  # Use 4 cores
brms.backend = "cmdstanr")
bayes_seed <- 1234
# Custom ggplot theme to make pretty plots
# Get Barlow Semi Condensed at https://fonts.google.com/specimen/Barlow+Semi+Condensed
theme_clean <- function() {
theme_minimal(base_family = "Barlow Semi Condensed") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
strip.text = element_text(face = "bold", size = rel(0.8), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold"))
}
# Make labels use Barlow by default
update_geom_defaults("label_repel",
list(family = "Barlow Semi Condensed",
fontface = "bold"))
update_geom_defaults("label",
list(family = "Barlow Semi Condensed",
fontface = "bold"))
# The ggh4x paackage includes a `facet_nested()` function for nesting facets
# (like countries in continents). Throughout this post, I want the
# continent-level facets to use bolder text and a lighter gray strip. I don't
# want to keep repeating all these settings, though, so I create a list of the
# settings here with `strip_nested()` and feed it to `facet_nested_wrap()` later
nested_settings <- strip_nested(
text_x = list(element_text(family = "Barlow Semi Condensed Black",
face = "plain"), NULL),
background_x = list(element_rect(fill = "grey92"), NULL),
by_layer_x = TRUE)
# Little dataset of 8 countries (2 for each of the 4 continents in the data)
# that are good examples of different trends and intercepts
countries <- tribble(
~country,       ~continent,
"Egypt",        "Africa",
"Sierra Leone", "Africa",
"Pakistan",     "Asia",
"Yemen, Rep.",  "Asia",
"Bolivia",      "Americas",
"Canada",       "Americas",
"Italy",        "Europe",
"Portugal",     "Europe"
)
# Clean up the gapminder data a little
gapminder <- gapminder::gapminder %>%
# Remove Oceania since there are only two countries there and we want bigger
# continent clusters
filter(continent != "Oceania") %>%
# Scale down GDP per capita so it's more interpretable ("a $1,000 increase in
# GDP" vs. "a $1 increase in GDP")
# Also log it
mutate(gdpPercap_1000 = gdpPercap / 1000,
gdpPercap_log = log(gdpPercap)) %>%
mutate(across(starts_with("gdp"), list("z" = ~scale(.)))) %>%
# Make year centered on 1952 (so we're counting the years since 1952). This
# (1) helps with interpretability, since the intercept will show the average
# at 1952 instead of the average at 0 CE, and (2) helps with estimation speed
# since brms/Stan likes to work with small numbers
mutate(year_orig = year,
year = year - 1952) %>%
# Indicator for the 8 countries we're focusing on
mutate(highlight = country %in% countries$country)
# Extract rows for the example countries
original_points <- gapminder %>%
filter(country %in% countries$country) %>%
# Use real years
mutate(year = year_orig)
glimpse(gapminder)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(size = 0.5, alpha = 0.25) +
geom_smooth(method = "lm", aes(color = NULL), color = "grey60", size = 0.5,
se = FALSE, show.legend = FALSE) +
annotate(geom = "label", label = "Global trend", x = 64000, y = 84,
size = 3, color = "grey60") +
geom_path(aes(group = country, size = highlight),
arrow = arrow(type = "open", angle = 30, length = unit(0.75, "lines")),
show.legend = FALSE) +
geom_label_repel(data = filter(gapminder, year == 15, highlight == TRUE),
aes(label = country), size = 3, seed = 1234,
show.legend = FALSE,
family = "Barlow Semi Condensed", fontface = "bold") +
scale_size_manual(values = c(0.075, 1), guide = "none") +
scale_color_okabe_ito(order = c(2, 3, 6, 1),
guide = guide_legend(override.aes = list(size = 3, alpha = 1))) +
scale_x_log10(labels = dollar_format(accuracy = 1), breaks = 125 * (2^(1:10))) +
labs(x = "GDP per capita (log)", y = "Life expectancy", color = "Continent") +
theme_clean() +
theme(legend.position = "bottom")
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +
geom_point(size = 0.5, alpha = 0.25) +
geom_smooth(method = "lm", aes(color = NULL), color = "grey60", size = 0.5,
se = FALSE, show.legend = FALSE) +
annotate(geom = "label", label = "Global trend", x = 64000, y = 84,
size = 3, color = "grey60") +
geom_path(aes(group = country, size = highlight),
arrow = arrow(type = "open", angle = 30, length = unit(0.75, "lines")),
show.legend = FALSE) +
geom_label_repel(data = filter(gapminder, year == 15, highlight == TRUE),
aes(label = country), size = 3, seed = 1234,
show.legend = FALSE,
family = "Barlow Semi Condensed", fontface = "bold") +
scale_size_manual(values = c(0.075, 1), guide = "none") +
scale_color_okabe_ito(order = c(2, 3, 6, 1),
guide = guide_legend(override.aes = list(size = 3, alpha = 1))) +
scale_x_log10(labels = dollar_format(accuracy = 1), breaks = 125 * (2^(1:10))) +
labs(x = "GDP per capita (log)", y = "Life expectancy", color = "Continent") +
theme_clean() +
theme(legend.position = "bottom")
gdp_mean_sd <- attributes(gapminder$gdpPercap_z)
gdp_mean <- gdp_mean_sd$`scaled:center`
gdp_sd <- gdp_mean_sd$`scaled:scale`
gdp_log_mean_sd <- attributes(gapminder$gdpPercap_log_z)
gdp_log_mean <- gdp_log_mean_sd$`scaled:center`
gdp_log_sd <- gdp_log_mean_sd$`scaled:scale`
model_gdp_boring <- brm(
bf(lifeExp ~ gdpPercap_z + year),
data = gapminder,
chains = 4, seed = bayes_seed
)
install.packages('cmdstanr')
library(cmdstanr)
model_gdp_boring <- brm(
bf(lifeExp ~ gdpPercap_z + year),
data = gapminder,
chains = 4, seed = bayes_seed
)
